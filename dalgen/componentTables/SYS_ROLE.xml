<!DOCTYPE table SYSTEM "../config/table-config-1.0.dtd">
<table sqlname="sys_role" physicalName="sys_role" remark="角色">
    <!--  特殊字符说明 &lt;&gt; <> -->
    <!-- baseSql option中 select * 会自动替换为 include -->
    <sql id="Base_Column_List">
        ID,REMARK,DEL_FLAG,CREATE_BY,UPDATE_BY
        ,SYS_ROLE_NAME,SYS_ROLE_TYPE,SYS_ROLE_UUID,CREATE_TIME,UPDATE_TIME
    </sql>

    <!-- baseSql option中 select sf.* 会自动替换为 include -->
    <sql id="Base_SF_Column_List">
        sf.ID,sf.REMARK,sf.DEL_FLAG,sf.CREATE_BY,sf.UPDATE_BY
        ,sf.SYS_ROLE_NAME,sf.SYS_ROLE_TYPE,sf.SYS_ROLE_UUID,sf.CREATE_TIME,sf.UPDATE_TIME
    </sql>

    <operation name="insert" paramtype="object" remark="插入表:sys_role">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT
            LAST_INSERT_ID()
        </selectKey>
        <![CDATA[
        INSERT INTO sys_role(
            ID
            ,REMARK
            ,DEL_FLAG
            ,CREATE_BY
            ,UPDATE_BY
            ,SYS_ROLE_NAME
            ,SYS_ROLE_TYPE
            ,SYS_ROLE_UUID
            ,CREATE_TIME
            ,UPDATE_TIME
        )VALUES(
             null
            , #{remark,jdbcType=VARCHAR}
            , #{delFlag,jdbcType=CHAR}
            , #{createBy,jdbcType=VARCHAR}
            , #{updateBy,jdbcType=VARCHAR}
            , #{sysRoleName,jdbcType=VARCHAR}
            , #{sysRoleType,jdbcType=CHAR}
            , #{sysRoleUuid,jdbcType=VARCHAR}
            , #{createTime,jdbcType=TIMESTAMP}
            , #{updateTime,jdbcType=TIMESTAMP}
        )
        ]]>
    </operation>

    <!-- foreach 可以自定义类型，paramtype="primitive" foreach->javatype="自己书写的类"  -->
    <!-- 只有一个参数且为List时必须将参数命名为list -->
    <operation name="insertBatch" paramtype="objectList" remark="批量插入表:sys_role">
        INSERT INTO sys_role(
            ID
            ,REMARK
            ,DEL_FLAG
            ,CREATE_BY
            ,UPDATE_BY
            ,SYS_ROLE_NAME
            ,SYS_ROLE_TYPE
            ,SYS_ROLE_UUID
            ,CREATE_TIME
            ,UPDATE_TIME
        )VALUES
        <foreach collection="list"  item="item" separator=",">
            (
                 null
                , #{item.remark,jdbcType=VARCHAR}
                , #{item.delFlag,jdbcType=CHAR}
                , #{item.createBy,jdbcType=VARCHAR}
                , #{item.updateBy,jdbcType=VARCHAR}
                , #{item.sysRoleName,jdbcType=VARCHAR}
                , #{item.sysRoleType,jdbcType=CHAR}
                , #{item.sysRoleUuid,jdbcType=VARCHAR}
                , #{item.createTime,jdbcType=TIMESTAMP}
                , #{item.updateTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </operation>

    <!-- 不推荐使用全 update 有需要自己打开
    <operation name="update" paramtype="object" remark="更新表:sys_role">
        <![CDATA[
        UPDATE sys_role
        SET
            REMARK          = #{remark,jdbcType=VARCHAR}
            ,DEL_FLAG        = #{delFlag,jdbcType=CHAR}
            ,CREATE_BY       = #{createBy,jdbcType=VARCHAR}
            ,UPDATE_BY       = #{updateBy,jdbcType=VARCHAR}
            ,SYS_ROLE_NAME   = #{sysRoleName,jdbcType=VARCHAR}
            ,SYS_ROLE_TYPE   = #{sysRoleType,jdbcType=CHAR}
            ,SYS_ROLE_UUID   = #{sysRoleUuid,jdbcType=VARCHAR}
            ,CREATE_TIME     = #{createTime,jdbcType=TIMESTAMP}
            ,UPDATE_TIME     = #{updateTime,jdbcType=TIMESTAMP}
        WHERE
            ID              = #{id,jdbcType=BIGINT}
        ]]>
    </operation>
    -->

    <operation name="deleteById" multiplicity="one" remark="根据主键删除数据:SYS_ROLE">
        DELETE FROM sys_role
        WHERE
        ID = #{id,jdbcType=BIGINT}
    </operation>

        <operation name="getById" multiplicity="one" remark="根据主键获取数据:SYS_ROLE">
            SELECT * FROM sys_role
            WHERE
                ID = #{id,jdbcType=BIGINT}
        </operation>
    <operation name="getByUuid" multiplicity="one" remark="根据uuid获取数据:SYS_ROLE">
        SELECT * FROM sys_role
        WHERE
        sys_role_uuid = #{sysRoleUuid,jdbcType=BIGINT}
        and del_flag=0
    </operation>
    <operation name="getRoleByUserId" multiplicity="many" remark="根据用户的id查询角色信息">
        SELECT sys_role_name,sys_role_uuid FROM sys_role WHERE id IN(
        SELECT role_id FROM sys_role_user roleUser WHERE user_id=#{uId,jdbcType=BIGINT} AND del_flag=0
        ) AND del_flag=0
    </operation>
    <operation name="getRoleListByRoleUUID" multiplicity="many" remark="根据角色uuid查询角色列表id">
        SELECT id FROM sys_role WHERE sys_role_uuid IN
        <foreach collection="list" open="(" close=")" item="uuids" separator=",">
            #{uuids,jdbcType=VARCHAR}
        </foreach>
        AND del_flag=0
    </operation>
<operation name="getAllRoleListByNoParam" multiplicity="many" remark="查询全部角色">
    SELECT
    ID,SYS_ROLE_NAME,SYS_ROLE_TYPE,SYS_ROLE_UUID
    FROM sys_role
    WHERE del_flag=0
</operation>
    <operation name="updateRole" paramtype="object" remark="修改用户角色">
        update sys_role
        <set>
            <if test="sysRoleUuid != null">
                sys_role_uuid = #{sysRoleUuid,jdbcType=VARCHAR},
            </if>
            <if test="sysRoleName != null">
                sys_role_name = #{sysRoleName,jdbcType=VARCHAR},
            </if>
            <if test="sysRoleType != null">
                sys_role_type = #{sysRoleType,jdbcType=CHAR},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="delFlag != null">
                del_flag = #{delFlag,jdbcType=CHAR},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy,jdbcType=VARCHAR},
            </if>
        </set>
        where sys_role_uuid = #{sysRoleUuid,jdbcType=VARCHAR}
    </operation>
    <operation name="findSysRoleByName" multiplicity="one" remark="根据角色名称查询角色信息">
        select * from sys_role
        where
        sys_role_name=#{sysRoleName,jdbcType=VARCHAR}
    </operation>
    <operation name="findSysRoleByNameAndUuid" multiplicity="one" remark="修改时根据角色名称查询角色信息">
        select * from sys_role
        where
        sys_role_name=#{sysRoleName,jdbcType=VARCHAR}
        and sys_role_uuid!=#{sysRoleUuid,jdbcType=VARCHAR}
    </operation>
    <operation name="roleListPage" multiplicity="paging" paging="RoleList" remark="角色列表分页">
        select id,sys_role_uuid, sys_role_name, sys_role_type, remark
        from sys_role
        <trim prefixOverrides="AND || OR" prefix="WHERE">
            <if test="delFlag!=null">
                AND del_flag=#{delFlag,jdbcType=CHAR}
            </if>
        </trim>
        order by create_time desc
    </operation>
    <operation name="checkRoleName" multiplicity="one" resulttype="int" remark="查询除自己之外是否还存在相同名称">
        select count(id)
        from sys_role
        where
        sys_role_name=#{sysRoleName,jdbcType=VARCHAR}
        and id!=#{id,jdbcType=BIGINT}
    </operation>
</table>
